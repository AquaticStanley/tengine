Component system

Physics/Input/Graphics

Pipeline design pattern?

References for downstream patterns?

Physics/Input seem to be one entity, or world could take care of physics

Input influences things that are going to happen, which are always paired with what actually happens?

Why would the input component not directly change the physics component?
 - We would separate for the other reason of extendability
 - There's some inherent overlap still

What should be the observation structure of these components?
 - Metadata should be uninvolved with any part and just used for engine-specific miscellaneous knowledge on that specific instantiation of an object
 - Graphics should have a reference to the physics component as it's directly dependent on it



 - The physics component should not ever change the input component, the input component should change the physics component
 - What kind of relationship does that exhibit?

 - Should physics have a reference to the input component? -> No, the input component must change the physics component when necessary
 - Should the input component have a reference to the physics component? -> Not a bad idea!


 Should the components take the other components in the constructor, or should the gameobject simply pass these through?

 -Can we put variables in abstract base classes? (physics component common stuff)

Where should player state be handled/stored? (Crouching, jumping, etc)
- Probably stored in physics, altered in input as with many other things

implement gameobject operator bool for deletion

What should hold on to specific gameobject data? like cooldown information or inventory?
- Should probably be its own component; the physics component can be in charge of updating it though

What kind of thing would go in game data but not meta data or physics data?
- Meta data should hold data used by the game engine itself, such as id, deletion status,

Does every GameObject even need a GameData component?
- No, it wouldn't make sense for a piece of shrubbery to have an inventory

Should we make this GameData not part of the base?

Conclusion: If physics is going to be in charge of updating it, the specific physics component should have a specific game data component associated with it; it has no business being in the base gameobject class imo.



============================

Does it make sense to loop over the physics components and call update(*this), passing in world to the update function?

Or should we do:

for(GO& object : objects) {
  update(object->physics);
}

Can't do that as we don't know what the physics object implements; must pass control to the object being updated, as he has the most context of what he can do.

Is there any way to make that work? It really is better from a conceptual standpoint.

Should we have an observer pointer to other components? It seems that if we have a reference, it will be impossible to hot-swap components.

Or should we disallow hot swapping while enforcing new object creation when this happens?

Store a reference to the base object to only use with getPhysicsComponent() ?

Inherit from an object with access to the base object


When swapping out components in the base object, the base object must forward the new addresses to all members of the class interested



==========
Graphics:

-Graphics window should be a class holding onto a sf::draw_window or whatever, and should call utility functions provided in the Graphics namespace, passing in its window when needed

- This allows for testability in the graphics library



At some point, I should convert all spaces to 4 spaces (maybe tabs for anarchy)

Where should the shouldBeRemoved variable be stored?
-It makes sense to live in metadata, but it's set in physics
-It should live in physics as the alternative is much more confusing for the user

In terms of constants usable to component classes, what I could do is this:
I could have a file that includes all of the component files to do it quickly from the factory
All of the component files could include another file that contains constants for that component

But honestly it seems like it's more useful to just explicitly include them from the factory, as if there were, for example, more than three components and some expectation of swapping them out.

However, the factory wouldn't be the one swapping out... so what should we do?
What does swapping out components even look like?


When a derived class needs to be coupled and use specialized derived methods of other components, it should do as in Player.h where it static_casts the Base class's component to what it expects I think

Wrap up player states in a PlayerState class?


Add thing where I don't compare object to itself in world.cpp